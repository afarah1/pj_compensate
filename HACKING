* Usage?

See README

* Docs?

Function contracts can be found on their respective headers. The code is well
documented, read it!

* Contact?

See the Github profile of the authors.

* Bug reports? Patches?

Via Issues and Pull Requests.

* Testing modifications

There is currently no test suite. However, there should be no warnings, even
though a vast amount of warn flags is used. Valgrind should not yield _any_
errors or leaks. If you find one of these, either you broke something or you
found a bug.

* "Architechture"

0. Read user input with filenames etc, on pj_compensate.c and args.h
1. Use the functions defined in reader.h to read the benchmark files generated
   by Akypuera as supplied by the user. Store the results on the singleton
   structures defined in that same header. These structs encapsulate all data
   we need for compensation and are passed around.
2. Read all events from the trace file via the functions in pjdread.c into the
   event queues (see the docs!)
3. Link sends and recvs (see pj_compensate.c)
4. Process all events in the queue, printing results to stdout as we go

* What does each file do?

~/pj_compensate find -name '*.h' | xargs head -n 1
==> ./include/compensation.h <==
/* Routines to compensate event timestamps */

==> ./include/args.h <==
/* Argument parsing */

==> ./include/prng.h <==
/* pseudo ranodm double between 0 and 1, uniformally distributed */

==> ./include/hist.h <==
/* Formulas for histograms */

==> ./include/ref.h <==
/* Simple reference counting data structure for embedding, for internal use. */

==> ./include/queue.h <==
/* State and link queue implementations (see also events.h) */

==> ./include/reader.h <==
/* Routines to read binaries generated by Aky and structs to store the data */

==> ./include/events.h <==
/* Ref counted event structs (States and Links) and associated routines */

==> ./include/logging.h <==
/* A simple logging macro and some wrappers */

==> ./include/utlist.h <==
/* The famous utlist macro lib */

~/pj_compensate find -name '*.c' | xargs head -n 1
==> ./src/hist.c <==
/* See the header file for contracts and more docs */

==> ./src/pj_compensate.c <==
/* Main application */

==> ./src/events.c <==
/* See the header file for contracts and more docs */

==> ./src/compensation.c <==
/* See the header file for contracts and more docs */

==> ./src/pjdread.c <==
/* Read a pj_dump trace file into the event queues */

==> ./src/reader.c <==
/* See the header file for contracts and more docs */

==> ./src/queue.c <==
/* See the header file for contracts and more docs */
